# The proposal
<!--
How are you going to solve the problem? Include the concrete actions you
will take and an estimated timeline. What are likely failure modes and
how will you recover from them?

This is where the proposal should be outlined.
-->


## Overview
<!--
At a high-level address what your proposal is and how it will address
the problem identified. Highlight any benefits to the R Community that
follow from solving the problem. This should be your most compelling
section.

Include concrete actions you will take and estimated timeline.
-->

To address performance limitations in `fuzzyjoin`’s string distance joins, we propose a new R package: `fozziejoin`.
To date, `fozziejoin` has implemented 9 of 10 string distance algorithms available in `fuzzyjoin`.
Benchmarks based on `fuzzyjoin`'s motivating example show consistent performance gains on Windows and Linux. Speedups exceed 100x for cases like Hamming distance.

These improvements enable scalable approximate joins in R, with applications in public health, social science, and government analytics.

The codebase is designed with CRAN compliance in mind.
This grant aims to replicate `fuzzyjoin`’s user-friendly interface, develop documentation and supporting materials, and achieve CRAN publication.
Development will span December 2025 to July 2026.

## Detail
<!--
Go into more detail about the specifics of the project and how it delivers
against the problem.

Depending on project type the detail section should include:
-->

### Minimum Viable Product

<!--
What is the smallest thing you can build that delivers value to your users?
-->
The minimum viable product will be publishing the `fozziejoin` package to CRAN.
The initial release will include the `stringdist_join` family of functions, comprehensive documentation, an example dataset, a usage vignette, and a testing suite.

To align output structure and function definitions with `fuzzyjoin`,
`fozziejoin` will replicate `by` argument behavior, add a case sensitivity
option, return a `tibble` when available, and match `fuzzyjoin`’s output column
naming conventions. This list is not exhaustive; additional differences will be
addressed iteratively, guided by community feedback and practical use.

### Architecture

<!--
What does the high-level architecture look like?
-->
The initial release will include string distance join functions modeled after
their `fuzzyjoin` counterparts: `stringdist_join`, `stringdist_inner_join`,
`stringdist_left_join`, `stringdist_right_join`, `stringdist_full_join`,
`stringdist_semi_join`, and `stringdist_anti_join`.
The package will follow a standard `rextendr` structure.

### Assumptions

<!--
What assumptions are you making that, if proven false, would invalidate the project?
-->
This project assumes that `fozziejoin`’s performance gains will justify its installation requirements.
If not, adoption may be limited.
It also assumes that alternatives like `zoomerjoin` are not direct substitutes for the flexibility and functionality of `fuzzyjoin`.
If this proves false, `fozziejoin` may offer redundant capabilities.

### External dependencies

<!--
What external dependencies does the project have (e.g. libraries, services, other projects, etc.)?
-->

Installing `fozziejoin` requires R 4.2 or higher and the base `stats` package.
Future versions will suggest `tibble` [@tibble] to support tidy output.
Additional packages are recommended for development, benchmarking, and testing.
Source installs require `cargo`, `rustc`, and the `xz` decompression utility.
Since CRAN provides binaries for Windows and macOS, these requirements mainly affect Linux users and developers.
